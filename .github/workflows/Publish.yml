# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

name: Publish

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14
      - run: yarn
      - run: yarn build

  # publish-npm:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Publish to npm
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 14
  #         registry-url: https://registry.npmjs.org/
  #     - run: npm publish
  #       env:
  #         NODE_AUTH_TOKEN: ${{secrets.npm_token}}

  # publish-docker:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Login to docker hub
  #       uses: docker/login-action@v1.6.0
  #       with:
  #         username: mainnet
  #         password: ${{secrets.dockerhub_password}}

  #     - name: Build docker image
  #       run: docker build ./generated/serve/docker --tag mainnet/mainnet-rest:${GITHUB_REF#refs/*/} --build-arg GIT_REPO=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY} --build-arg GIT_COMMIT=${GITHUB_SHA}

  #     - name: Push image to docker hub
  #       run: docker push mainnet/mainnet-rest:${GITHUB_REF#refs/*/}

  # # Deploy to https://rest-unstable.mainnet.cash
  # # Done by pushing to deploy branch on github, this will trigger the deploy action
  # publish-unstable:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set REPO_USER env
  #       run: echo "REPO_USER=$(echo $GITHUB_REPOSITORY | cut -d / -f1)" >> $GITHUB_ENV
  #     - name: Set REPO_NAME env
  #       run: echo "REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d / -f2)" >> $GITHUB_ENV
  #     - name: Clone repo, merge master into deploy, push deploy to repo
  #       run: |
  #         git clone https://${{ env.REPO_USER }}:${{ secrets.COMMIT_USER_TOKEN }}@github.com/${GITHUB_REPOSITORY} ${{ env.REPO_NAME }}
  #         cd ${{ env.REPO_NAME }}
  #         git config --global user.email "ci@github.com"
  #         git config --global user.name "Github CI"
  #         git fetch origin deploy
  #         git checkout deploy
  #         git merge master
  #         git push origin deploy

  release-libs:
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        language: [php, python, go]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set REPO_USER env
        run: echo "REPO_USER=$(echo $GITHUB_REPOSITORY | cut -d / -f1)" >> $GITHUB_ENV
      - name: Set REPO_NAME env
        run: echo "REPO_NAME=mainnet-${{ matrix.language }}-generated
      - name: Set TAG_NAME env
        run: echo "TAG_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Clone repo, create new tag
        run: |
          git clone https://${{ env.REPO_USER }}:${{ secrets.COMMIT_USER_TOKEN }}@github.com/${{ env.REPO_USER }}/${{ env.REPO_NAME }} ${{ env.REPO_NAME }}
          cd ${{ env.REPO_NAME }}
          git config --global user.email "ci@github.com"
          git config --global user.name "Github CI"
          git tag -af ${{ env.TAG_NAME }}
          git push -f origin ${{ env.TAG_NAME }}
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.COMMIT_USER_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.TAG_NAME }}
          repo: mainnet-${{ matrix.language }}-generated
          owner: ${{ env.REPO_USER }}
          body: |
            Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
